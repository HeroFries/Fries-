import discord
import requests
import os

TOKEN = os.getenv("TOKEN")  # Use Secrets in Replit

intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)

owner_id = 1296780549049815123  # Your Discord ID

# Fee settings
major_coins = ["BTC", "ETH", "SOL", "BNB", "LTC"]
mid_coins = ["DOGE", "SHIB", "PEPE", "FLOKI", "WIF"]
disabled_coins = set()

# Inventory system (symbol: amount)
inventory = {}

# Price cache
prices = {}

# Simulated price API
def fetch_price(symbol):
    try:
        url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol.lower()}&vs_currencies=usd"
        r = requests.get(url).json()
        price = r[symbol.lower()]["usd"]
        if price <= 0:
            disabled_coins.add(symbol.upper())
            return None
        return price
    except:
        disabled_coins.add(symbol.upper())
        return None

def get_fee_percent(symbol):
    if symbol.upper() in major_coins:
        return 0.5
    elif symbol.upper() in mid_coins:
        return 10
    else:
        return 40

def is_owner(user):
    return user.id == owner_id

@client.event
async def on_ready():
    print(f"SwapBot is ready as {client.user}!")

@client.event
async def on_message(message):
    if message.author.bot:
        return

    content = message.content.strip()

    # Deposit (owner only)
    if content.startswith(".deposit") and is_owner(message.author):
        try:
            _, amount, coin = content.split()
            coin = coin.upper()
            amount = float(amount)
            inventory[coin] = inventory.get(coin, 0) + amount
            await message.channel.send(f"‚úÖ Deposited {amount} {coin} to bot inventory.")
        except:
            await message.channel.send("‚ùå Usage: `.deposit <amount> <coin>`")

    # Withdraw (owner only)
    elif content.startswith(".withdraw") and is_owner(message.author):
        try:
            _, amount, coin = content.split()
            coin = coin.upper()
            amount = float(amount)
            if inventory.get(coin, 0) >= amount:
                inventory[coin] -= amount
                await message.channel.send(f"‚úÖ Withdrawn {amount} {coin} from bot inventory.")
            else:
                await message.channel.send(f"‚ùå Not enough {coin} in inventory.")
        except:
            await message.channel.send("‚ùå Usage: `.withdraw <amount> <coin>`")

    # Check inventory
    elif content.startswith(".inventory"):
        if not inventory:
            await message.channel.send("üì¶ Inventory is empty.")
        else:
            inv_list = [f"{coin}: {amt:.4f}" for coin, amt in inventory.items()]
            await message.channel.send("üì¶ Inventory:\n" + "\n".join(inv_list))

    # Swap
    elif content.startswith(".swap"):
        try:
            _, amount, from_coin, to_coin = content.split()
            from_coin = from_coin.upper()
            to_coin = to_coin.upper()
            amount = float(amount)

            if from_coin in disabled_coins or to_coin in disabled_coins:
                await message.channel.send(f"üö´ One of the coins is currently disabled due to price issues.")
                return

            price_from = fetch_price(from_coin)
            price_to = fetch_price(to_coin)

            if price_from is None or price_to is None:
                await message.channel.send("‚ö†Ô∏è Unable to fetch price. Coin may be disabled.")
                return

            usd_value = amount * price_from
            fee_percent = get_fee_percent(from_coin)
            usd_after_fee = usd_value * (1 - fee_percent / 100)
            final_amount = usd_after_fee / price_to

            # Check if bot has enough of target coin
            if inventory.get(to_coin, 0) < final_amount:
                await message.channel.send(f"‚ùå Bot doesn't have enough {to_coin} to complete this swap.")
                return

            inventory[to_coin] -= final_amount
            inventory[from_coin] = inventory.get(from_coin, 0) + amount

            await message.channel.send(
                f"üîÑ Swapped {amount} {from_coin} ‚Üí {final_amount:.4f} {to_coin} (Fee: {fee_percent}%)"
            )
        except:
            await message.channel.send("‚ùå Usage: `.swap <amount> <from_coin> <to_coin>`")

    # Disable coin manually
    elif content.startswith(".disable") and is_owner(message.author):
        try:
            _, coin = content.split()
            disabled_coins.add(coin.upper())
            await message.channel.send(f"‚ö†Ô∏è {coin.upper()} has been manually disabled.")
        except:
            await message.channel.send("‚ùå Usage: `.disable <coin>`")

    # Enable coin manually
    elif content.startswith(".enable") and is_owner(message.author):
        try:
            _, coin = content.split()
            disabled_coins.discard(coin.upper())
            await message.channel.send(f"‚úÖ {coin.upper()} has been manually enabled.")
        except:
            await message.channel.send("‚ùå Usage: `.enable <coin>`")
